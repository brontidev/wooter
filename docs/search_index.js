(function () {
  window.DENO_DOC_SEARCH_INDEX = {"nodes":[{"kind":[{"char":"c","kind":"Class","title":"Class"}],"name":"Event","file":".","doc":"Event class passed into route handlers","url":"././~/Event.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Event.prototype.resp","file":".","doc":"Respond function\n","url":"././~/Event.prototype.resp.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Event.prototype.err","file":".","doc":"Rejects","url":"././~/Event.prototype.err.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Event.prototype.promise","file":".","doc":"Promise used to evaluate response, used internally to send response to the client","url":"././~/Event.prototype.promise.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Event.prototype.resolvers","file":".","doc":"","url":"././~/Event.prototype.resolvers.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"Methods","file":".","doc":"Object map of HTTP verb method functions","url":"././~/Methods.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"MethodsNoPath","file":".","doc":"Object map of HTTP verb method functions with no path","url":"././~/MethodsNoPath.html","deprecated":false},{"kind":[{"char":"c","kind":"Class","title":"Class"}],"name":"MiddlewareEvent","file":".","doc":"Event class passed into middleware handlers","url":"././~/MiddlewareEvent.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"MiddlewareEvent.prototype.up","file":".","doc":"Evaluates the next handler","url":"././~/MiddlewareEvent.prototype.up.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"MiddlewareEvent.prototype.storedResponse","file":".","doc":"Stored response from the next handler","url":"././~/MiddlewareEvent.prototype.storedResponse.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"MiddlewareEvent.prototype._up","file":".","doc":"Evaluates the next handler","url":"././~/MiddlewareEvent.prototype._up.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"MiddlewareEvent.prototype.hasCalledUp","file":".","doc":"","url":"././~/MiddlewareEvent.prototype.hasCalledUp.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"MiddlewareEvent.prototype._storedResponse","file":".","doc":"","url":"././~/MiddlewareEvent.prototype._storedResponse.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"RouteAddRoute","file":".","doc":"Registers a method to the route","url":"././~/RouteAddRoute.html","deprecated":false},{"kind":[{"char":"c","kind":"Class","title":"Class"}],"name":"Wooter","file":".","doc":"The main class for Wooter","url":"././~/Wooter.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Wooter.withMethods","file":".","doc":"Create a new Wooter with HTTP verb methods","url":"././~/Wooter.withMethods.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Wooter.prototype.useMethods","file":".","doc":"Converts a normal Wooter into a Wooter with HTTP verb methods\n\nUse this after applying middleware to a Wooter\n","url":"././~/Wooter.prototype.useMethods.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Wooter.makeRouteBuilder","file":".","doc":"Creates a route builder using a wooter and a path name","url":"././~/Wooter.makeRouteBuilder.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Wooter.prototype.retypeWithMethods","file":".","doc":"reapplies WooterWithMethods type (after adding middleware)","url":"././~/Wooter.prototype.retypeWithMethods.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Wooter.prototype.use","file":".","doc":"Apply some middleware to a wooter","url":"././~/Wooter.prototype.use.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Wooter.prototype.addRoute","file":".","doc":"Registers a route to the wooter","url":"././~/Wooter.prototype.addRoute.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Wooter.prototype.namespace","file":".","doc":"Registers another wooter as a namespace","url":"././~/Wooter.prototype.namespace.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Wooter.prototype.namespace","file":".","doc":"Registers a namespace using a function that adds routes to a wooter","url":"././~/Wooter.prototype.namespace.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Wooter.prototype.namespace","file":".","doc":"Registers a namespace using a function that modifies the wooter, and a function that adds routes to a wooter\n","url":"././~/Wooter.prototype.namespace.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Wooter.prototype.namespace","file":".","doc":"","url":"././~/Wooter.prototype.namespace.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Wooter.prototype.fetch","file":".","doc":"Passes a request through the wooter","url":"././~/Wooter.prototype.fetch.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Wooter.prototype._fetch","file":".","doc":"Passes a request through the wooter","url":"././~/Wooter.prototype._fetch.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Wooter.prototype._fetch","file":".","doc":"","url":"././~/Wooter.prototype._fetch.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Wooter.prototype.route","file":".","doc":"Creates a route builder","url":"././~/Wooter.prototype.route.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Wooter.prototype.match","file":".","doc":"Matches a route based on a path array (used internally)","url":"././~/Wooter.prototype.match.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Wooter.prototype.graph","file":".","doc":"","url":"././~/Wooter.prototype.graph.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"WooterAddRoute","file":".","doc":"Registers a route to the wooter","url":"././~/WooterAddRoute.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"WooterOptions","file":".","doc":"Options for creating a new Wooter","url":"././~/WooterOptions.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"WooterOptions.throwOnDuplicate","file":".","doc":"","url":"././~/WooterOptions.throwOnDuplicate.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"WooterOptions.catchErrors","file":".","doc":"","url":"././~/WooterOptions.catchErrors.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"WooterWithMethods","file":".","doc":"A Wooter with HTTP verb method functions","url":"././~/WooterWithMethods.html","deprecated":false},{"kind":[{"char":"N","kind":"Namespace","title":"Namespace"}],"name":"c","file":".","doc":"Exports [chemin](https://jsr.io/@dldc/chemin)\n","url":"././~/c.html","deprecated":false},{"kind":[{"char":"I","kind":"Interface","title":"Interface"}],"name":"c.IChemin","file":".","doc":"Chemin interface","url":"././~/c.IChemin.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"c.IChemin.IS_CHEMIN","file":".","doc":"","url":"././~/c.IChemin.IS_CHEMIN.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"c.IChemin.parts","file":".","doc":"","url":"././~/c.IChemin.parts.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"c.IChemin.serialize","file":".","doc":"","url":"././~/c.IChemin.serialize.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"c.IChemin.match","file":".","doc":"","url":"././~/c.IChemin.match.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"c.IChemin.matchExact","file":".","doc":"","url":"././~/c.IChemin.matchExact.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"c.IChemin.stringify","file":".","doc":"","url":"././~/c.IChemin.stringify.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"c.IChemin.extract","file":".","doc":"","url":"././~/c.IChemin.extract.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"c.IChemin.flatten","file":".","doc":"","url":"././~/c.IChemin.flatten.html","deprecated":false},{"kind":[{"char":"I","kind":"Interface","title":"Interface"}],"name":"c.ICheminMatch","file":".","doc":"Chemin match result","url":"././~/c.ICheminMatch.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"c.ICheminMatch.params","file":".","doc":"Params extracted from the pathname","url":"././~/c.ICheminMatch.params.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"c.ICheminMatch.rest","file":".","doc":"Rest of the pathname that was not matched","url":"././~/c.ICheminMatch.rest.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"c.ICheminMatch.exact","file":".","doc":"True if the match is exact (rest is empty)","url":"././~/c.ICheminMatch.exact.html","deprecated":false},{"kind":[{"char":"I","kind":"Interface","title":"Interface"}],"name":"c.ICheminParamBase","file":".","doc":"Base interface for a chemin param","url":"././~/c.ICheminParamBase.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"c.ICheminParamBase.name","file":".","doc":"","url":"././~/c.ICheminParamBase.name.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"c.ICheminParamBase.match","file":".","doc":"","url":"././~/c.ICheminParamBase.match.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"c.ICheminParamBase.stringify","file":".","doc":"","url":"././~/c.ICheminParamBase.stringify.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"c.ICheminParamBase.serialize","file":".","doc":"","url":"././~/c.ICheminParamBase.serialize.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"c.ICheminParamBase.meta","file":".","doc":"","url":"././~/c.ICheminParamBase.meta.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"c.ICheminParamBase.isEqual","file":".","doc":"","url":"././~/c.ICheminParamBase.isEqual.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"c.ICheminParamBase.factory","file":".","doc":"","url":"././~/c.ICheminParamBase.factory.html","deprecated":false},{"kind":[{"char":"I","kind":"Interface","title":"Interface"}],"name":"c.IFirstExactMatchResult","file":".","doc":"","url":"././~/c.IFirstExactMatchResult.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"c.IFirstExactMatchResult.chemin","file":".","doc":"","url":"././~/c.IFirstExactMatchResult.chemin.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"c.IFirstExactMatchResult.params","file":".","doc":"","url":"././~/c.IFirstExactMatchResult.params.html","deprecated":false},{"kind":[{"char":"I","kind":"Interface","title":"Interface"}],"name":"c.IFirstMatchResult","file":".","doc":"","url":"././~/c.IFirstMatchResult.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"c.IFirstMatchResult.chemin","file":".","doc":"","url":"././~/c.IFirstMatchResult.chemin.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"c.IFirstMatchResult.match","file":".","doc":"","url":"././~/c.IFirstMatchResult.match.html","deprecated":false},{"kind":[{"char":"I","kind":"Interface","title":"Interface"}],"name":"c.ISlashOptions","file":".","doc":"Otpions for the serialize function","url":"././~/c.ISlashOptions.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"c.ISlashOptions.leadingSlash","file":".","doc":"","url":"././~/c.ISlashOptions.leadingSlash.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"c.ISlashOptions.trailingSlash","file":".","doc":"","url":"././~/c.ISlashOptions.trailingSlash.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"c.OptionalValue","file":".","doc":"The match result for `pOptional` params","url":"././~/c.OptionalValue.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"c.Prefixed","file":".","doc":"","url":"././~/c.Prefixed.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"c.TCheminMatchMaybe","file":".","doc":"Chemin match result or null if no match","url":"././~/c.TCheminMatchMaybe.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"c.TCheminParam","file":".","doc":"Chemin param type","url":"././~/c.TCheminParam.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"c.TCheminParamAny","file":".","doc":"Chemin param type with any value","url":"././~/c.TCheminParamAny.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"c.TCheminsNamespaced","file":".","doc":"","url":"././~/c.TCheminsNamespaced.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"c.TCheminsRecord","file":".","doc":"","url":"././~/c.TCheminsRecord.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"c.TCheminsRecordMatches","file":".","doc":"","url":"././~/c.TCheminsRecordMatches.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"c.TCreateChemin","file":".","doc":"Advanced type of teh createChemin function","url":"././~/c.TCreateChemin.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"c.TEmptyObject","file":".","doc":"Empty object type","url":"././~/c.TEmptyObject.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"c.TIn","file":".","doc":"Type of the input of the serialize function","url":"././~/c.TIn.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"c.TNestedCheminsRecord","file":".","doc":"","url":"././~/c.TNestedCheminsRecord.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"c.TNestedCheminsRecordMatches","file":".","doc":"","url":"././~/c.TNestedCheminsRecordMatches.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"c.TParams","file":".","doc":"Extract the params type of a chemin","url":"././~/c.TParams.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"c.TPart","file":".","doc":"Part of a chemin, can be a param or a chemin","url":"././~/c.TPart.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"c.TPartIsEqual","file":".","doc":"Part isEqual function","url":"././~/c.TPartIsEqual.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"c.TPartMatch","file":".","doc":"Part match function","url":"././~/c.TPartMatch.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"c.TPartMatchResult","file":".","doc":"Result of a match","url":"././~/c.TPartMatchResult.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"c.TPartSerialize","file":".","doc":"Part serialize function","url":"././~/c.TPartSerialize.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"c.TPartStringify","file":".","doc":"Part stringify function","url":"././~/c.TPartStringify.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"c.TSerialize","file":".","doc":"Serialize function type","url":"././~/c.TSerialize.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"c.TSimplify","file":".","doc":"Simplify a type by removing the `undefined` type","url":"././~/c.TSimplify.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"c.TUnionParams","file":".","doc":"Union of all the params of a list of chemins","url":"././~/c.TUnionParams.html","deprecated":false},{"kind":[{"char":"v","kind":"Variable","title":"Variable"}],"name":"c.chemin","file":".","doc":"","url":"././~/c.chemin.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"c.cheminFactory","file":".","doc":"Factory function to create a chemin function with different default options.\nIt returns a function that works exactly like `chemin` but with a default `serialize` / `stringify` options.\n\n```ts\nconst chemin = cheminFactory({ leadingSlash: false });\nconst user = chemin(\"user\", \":id\");\nuser.serialize({ id: 5 }); // \"user/5\"\n```\n","url":"././~/c.cheminFactory.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"c.cheminParamsEqual","file":".","doc":"Compare two chemin params, this will return true if the two params have the same factory and parameters.\n","url":"././~/c.cheminParamsEqual.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"c.equal","file":".","doc":"Test if two chemins are equal.","url":"././~/c.equal.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"c.extract","file":".","doc":"Extract all chemins from a chemin including itself.","url":"././~/c.extract.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"c.flatten","file":".","doc":"Flatten a chemin into an array of chemin params.","url":"././~/c.flatten.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"c.isChemin","file":".","doc":"Check wether an object is a `Chemin` or not\nAccepts one argument and return `true` if it's a `Chemin`, false otherwise.\n\n```ts\nisChemin(chemin(\"admin\")); // true\n```\n","url":"././~/c.isChemin.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"c.match","file":".","doc":"Match a chemin against a pathname and return the params","url":"././~/c.match.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"c.matchAll","file":".","doc":"","url":"././~/c.matchAll.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"c.matchAllNested","file":".","doc":"","url":"././~/c.matchAllNested.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"c.matchExact","file":".","doc":"Match a chemin against a pathname and return the params if the match is exact, otherwise null.","url":"././~/c.matchExact.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"c.matchFirst","file":".","doc":"Match a pathname against a list of chemins and return the first match","url":"././~/c.matchFirst.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"c.matchFirstExact","file":".","doc":"","url":"././~/c.matchFirstExact.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"c.namespace","file":".","doc":"Add a base to a set of chemins","url":"././~/c.namespace.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"c.pConstant","file":".","doc":"Create a fixed value param\n\n```ts\nconst chemin = chemin(pConstant(\"home\"));\nmatchExact(chemin, \"/home\"); // {}\n```\n\nYou usually don't need to use this since you can just use a string directly in the `chemin` function.\n","url":"././~/c.pConstant.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"c.pInteger","file":".","doc":"Parse an integer params using `parseInt(x, 10)`\n\n```ts\nconst chemin = chemin(pInteger(\"myNum\"));\nmatchExact(chemin, \"/42\"); // { myNum: 42 }\n```\n","url":"././~/c.pInteger.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"c.pMultiple","file":".","doc":"Repeat a param multiple times\n\n```ts\nconst chemin = chemin(pMultiple(pString(\"categories\")));\nmatchExact(chemin, \"/\"); // { categories: [] }\nmatchExact(chemin, \"/foo/bar\"); // { categories: ['foo', 'bar'] }\n```\n\n```ts\nconst chemin = chemin(pMultiple(pString(\"categories\"), true));\nmatchExact(chemin, \"/\"); // false because atLeastOne is true\nmatchExact(chemin, \"/foo/bar\"); // { categories: ['foo', 'bar'] }\n```\n","url":"././~/c.pMultiple.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"c.pNumber","file":".","doc":"Parse a number params using `parseFloat(x)`\n\n```ts\nconst chemin = chemin(pNumber(\"myNum\"));\nmatchExact(chemin, \"/3.1415\"); // { myNum: 3.1415 }\n```\n\n**NOTE**: Because it uses `parseFloat` this will also accept `Infinity`, `10e2`...","url":"././~/c.pNumber.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"c.pOptional","file":".","doc":"Wrap a param to make it optional\n\n```ts\nconst chemin = chemin(pOptional(pInteger(\"myInt\")));\nmatchExact(chemin, \"/42\"); // { myInt: { present: true, value: 42 } }\nmatchExact(chemin, \"/\"); // { myInt: { present: false } }\n```\n","url":"././~/c.pOptional.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"c.pOptionalConst","file":".","doc":"Optional version of `pConstant`\nThis can also be done with `pOptional(pConstant(\"home\"))` but this has a nicer match result (`true` instead of `{ present: true, value: null }`)\n\n```ts\nconst chemin = chemin(pOptionalConst(\"isEditing\", \"edit\"));\nmatchExact(chemin, \"/edit\"); // { isEditing: true }\nmatchExact(chemin, \"/\"); // { isEditing: false }\n```\n\nIf `constant` is omitted then the name is used as the path.\n","url":"././~/c.pOptionalConst.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"c.pOptionalString","file":".","doc":"Optional version of `pString`\nThis can also be done with `pOptional(pString(\"name\"))` but this has a nicer match result (`\"name\"` or `false` instead of `{ present: boolean, value: \"name\" }`)\n\n```ts\nconst chemin = chemin(pOptionalString(\"name\"));\nmatchExact(chemin, \"/paul\"); // { name: 'paul' }\nmatchExact(chemin, \"/\"); // { name: false }\n```\n","url":"././~/c.pOptionalString.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"c.pString","file":".","doc":"","url":"././~/c.pString.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"c.partialMatch","file":".","doc":"","url":"././~/c.partialMatch.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"c.prefix","file":".","doc":"","url":"././~/c.prefix.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"c.serialize","file":".","doc":"Print a chemin from its params.","url":"././~/c.serialize.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"c.splitPathname","file":".","doc":"Split a pathname and prevent empty parts\nAccepts a string and returns an array of strings.\n\n```ts\nsplitPathname(\"/admin/user/5\"); // ['admin', 'user', '5']\n```\n\nNot that all match* functions will do this automatically.\nYou only need this function if you want to avoid splitting multiple times.\n","url":"././~/c.splitPathname.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"c.stringify","file":".","doc":"Transform a chemin into a string representation.","url":"././~/c.stringify.html","deprecated":false},{"kind":[{"char":"I","kind":"Interface","title":"Interface"}],"name":"IChemin","file":"chemin","doc":"Chemin interface","url":"./chemin/~/IChemin.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"IChemin.IS_CHEMIN","file":"chemin","doc":"","url":"./chemin/~/IChemin.IS_CHEMIN.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"IChemin.parts","file":"chemin","doc":"","url":"./chemin/~/IChemin.parts.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"IChemin.serialize","file":"chemin","doc":"","url":"./chemin/~/IChemin.serialize.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"IChemin.match","file":"chemin","doc":"","url":"./chemin/~/IChemin.match.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"IChemin.matchExact","file":"chemin","doc":"","url":"./chemin/~/IChemin.matchExact.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"IChemin.stringify","file":"chemin","doc":"","url":"./chemin/~/IChemin.stringify.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"IChemin.extract","file":"chemin","doc":"","url":"./chemin/~/IChemin.extract.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"IChemin.flatten","file":"chemin","doc":"","url":"./chemin/~/IChemin.flatten.html","deprecated":false},{"kind":[{"char":"I","kind":"Interface","title":"Interface"}],"name":"ICheminMatch","file":"chemin","doc":"Chemin match result","url":"./chemin/~/ICheminMatch.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"ICheminMatch.params","file":"chemin","doc":"Params extracted from the pathname","url":"./chemin/~/ICheminMatch.params.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"ICheminMatch.rest","file":"chemin","doc":"Rest of the pathname that was not matched","url":"./chemin/~/ICheminMatch.rest.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"ICheminMatch.exact","file":"chemin","doc":"True if the match is exact (rest is empty)","url":"./chemin/~/ICheminMatch.exact.html","deprecated":false},{"kind":[{"char":"I","kind":"Interface","title":"Interface"}],"name":"ICheminParamBase","file":"chemin","doc":"Base interface for a chemin param","url":"./chemin/~/ICheminParamBase.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"ICheminParamBase.name","file":"chemin","doc":"","url":"./chemin/~/ICheminParamBase.name.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"ICheminParamBase.match","file":"chemin","doc":"","url":"./chemin/~/ICheminParamBase.match.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"ICheminParamBase.stringify","file":"chemin","doc":"","url":"./chemin/~/ICheminParamBase.stringify.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"ICheminParamBase.serialize","file":"chemin","doc":"","url":"./chemin/~/ICheminParamBase.serialize.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"ICheminParamBase.meta","file":"chemin","doc":"","url":"./chemin/~/ICheminParamBase.meta.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"ICheminParamBase.isEqual","file":"chemin","doc":"","url":"./chemin/~/ICheminParamBase.isEqual.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"ICheminParamBase.factory","file":"chemin","doc":"","url":"./chemin/~/ICheminParamBase.factory.html","deprecated":false},{"kind":[{"char":"I","kind":"Interface","title":"Interface"}],"name":"IFirstExactMatchResult","file":"chemin","doc":"","url":"./chemin/~/IFirstExactMatchResult.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"IFirstExactMatchResult.chemin","file":"chemin","doc":"","url":"./chemin/~/IFirstExactMatchResult.chemin.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"IFirstExactMatchResult.params","file":"chemin","doc":"","url":"./chemin/~/IFirstExactMatchResult.params.html","deprecated":false},{"kind":[{"char":"I","kind":"Interface","title":"Interface"}],"name":"IFirstMatchResult","file":"chemin","doc":"","url":"./chemin/~/IFirstMatchResult.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"IFirstMatchResult.chemin","file":"chemin","doc":"","url":"./chemin/~/IFirstMatchResult.chemin.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"IFirstMatchResult.match","file":"chemin","doc":"","url":"./chemin/~/IFirstMatchResult.match.html","deprecated":false},{"kind":[{"char":"I","kind":"Interface","title":"Interface"}],"name":"ISlashOptions","file":"chemin","doc":"Otpions for the serialize function","url":"./chemin/~/ISlashOptions.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"ISlashOptions.leadingSlash","file":"chemin","doc":"","url":"./chemin/~/ISlashOptions.leadingSlash.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"ISlashOptions.trailingSlash","file":"chemin","doc":"","url":"./chemin/~/ISlashOptions.trailingSlash.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"OptionalValue","file":"chemin","doc":"The match result for `pOptional` params","url":"./chemin/~/OptionalValue.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"Prefixed","file":"chemin","doc":"","url":"./chemin/~/Prefixed.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"TCheminMatchMaybe","file":"chemin","doc":"Chemin match result or null if no match","url":"./chemin/~/TCheminMatchMaybe.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"TCheminParam","file":"chemin","doc":"Chemin param type","url":"./chemin/~/TCheminParam.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"TCheminParamAny","file":"chemin","doc":"Chemin param type with any value","url":"./chemin/~/TCheminParamAny.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"TCheminsNamespaced","file":"chemin","doc":"","url":"./chemin/~/TCheminsNamespaced.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"TCheminsRecord","file":"chemin","doc":"","url":"./chemin/~/TCheminsRecord.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"TCheminsRecordMatches","file":"chemin","doc":"","url":"./chemin/~/TCheminsRecordMatches.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"TCreateChemin","file":"chemin","doc":"Advanced type of teh createChemin function","url":"./chemin/~/TCreateChemin.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"TEmptyObject","file":"chemin","doc":"Empty object type","url":"./chemin/~/TEmptyObject.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"TIn","file":"chemin","doc":"Type of the input of the serialize function","url":"./chemin/~/TIn.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"TNestedCheminsRecord","file":"chemin","doc":"","url":"./chemin/~/TNestedCheminsRecord.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"TNestedCheminsRecordMatches","file":"chemin","doc":"","url":"./chemin/~/TNestedCheminsRecordMatches.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"TParams","file":"chemin","doc":"Extract the params type of a chemin","url":"./chemin/~/TParams.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"TPart","file":"chemin","doc":"Part of a chemin, can be a param or a chemin","url":"./chemin/~/TPart.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"TPartIsEqual","file":"chemin","doc":"Part isEqual function","url":"./chemin/~/TPartIsEqual.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"TPartMatch","file":"chemin","doc":"Part match function","url":"./chemin/~/TPartMatch.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"TPartMatchResult","file":"chemin","doc":"Result of a match","url":"./chemin/~/TPartMatchResult.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"TPartSerialize","file":"chemin","doc":"Part serialize function","url":"./chemin/~/TPartSerialize.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"TPartStringify","file":"chemin","doc":"Part stringify function","url":"./chemin/~/TPartStringify.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"TSerialize","file":"chemin","doc":"Serialize function type","url":"./chemin/~/TSerialize.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"TSimplify","file":"chemin","doc":"Simplify a type by removing the `undefined` type","url":"./chemin/~/TSimplify.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"TUnionParams","file":"chemin","doc":"Union of all the params of a list of chemins","url":"./chemin/~/TUnionParams.html","deprecated":false},{"kind":[{"char":"v","kind":"Variable","title":"Variable"}],"name":"chemin","file":"chemin","doc":"","url":"./chemin/~/chemin.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"cheminFactory","file":"chemin","doc":"Factory function to create a chemin function with different default options.\nIt returns a function that works exactly like `chemin` but with a default `serialize` / `stringify` options.\n\n```ts\nconst chemin = cheminFactory({ leadingSlash: false });\nconst user = chemin(\"user\", \":id\");\nuser.serialize({ id: 5 }); // \"user/5\"\n```\n","url":"./chemin/~/cheminFactory.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"cheminParamsEqual","file":"chemin","doc":"Compare two chemin params, this will return true if the two params have the same factory and parameters.\n","url":"./chemin/~/cheminParamsEqual.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"equal","file":"chemin","doc":"Test if two chemins are equal.","url":"./chemin/~/equal.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"extract","file":"chemin","doc":"Extract all chemins from a chemin including itself.","url":"./chemin/~/extract.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"flatten","file":"chemin","doc":"Flatten a chemin into an array of chemin params.","url":"./chemin/~/flatten.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"isChemin","file":"chemin","doc":"Check wether an object is a `Chemin` or not\nAccepts one argument and return `true` if it's a `Chemin`, false otherwise.\n\n```ts\nisChemin(chemin(\"admin\")); // true\n```\n","url":"./chemin/~/isChemin.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"match","file":"chemin","doc":"Match a chemin against a pathname and return the params","url":"./chemin/~/match.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"matchAll","file":"chemin","doc":"","url":"./chemin/~/matchAll.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"matchAllNested","file":"chemin","doc":"","url":"./chemin/~/matchAllNested.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"matchExact","file":"chemin","doc":"Match a chemin against a pathname and return the params if the match is exact, otherwise null.","url":"./chemin/~/matchExact.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"matchFirst","file":"chemin","doc":"Match a pathname against a list of chemins and return the first match","url":"./chemin/~/matchFirst.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"matchFirstExact","file":"chemin","doc":"","url":"./chemin/~/matchFirstExact.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"namespace","file":"chemin","doc":"Add a base to a set of chemins","url":"./chemin/~/namespace.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"pConstant","file":"chemin","doc":"Create a fixed value param\n\n```ts\nconst chemin = chemin(pConstant(\"home\"));\nmatchExact(chemin, \"/home\"); // {}\n```\n\nYou usually don't need to use this since you can just use a string directly in the `chemin` function.\n","url":"./chemin/~/pConstant.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"pInteger","file":"chemin","doc":"Parse an integer params using `parseInt(x, 10)`\n\n```ts\nconst chemin = chemin(pInteger(\"myNum\"));\nmatchExact(chemin, \"/42\"); // { myNum: 42 }\n```\n","url":"./chemin/~/pInteger.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"pMultiple","file":"chemin","doc":"Repeat a param multiple times\n\n```ts\nconst chemin = chemin(pMultiple(pString(\"categories\")));\nmatchExact(chemin, \"/\"); // { categories: [] }\nmatchExact(chemin, \"/foo/bar\"); // { categories: ['foo', 'bar'] }\n```\n\n```ts\nconst chemin = chemin(pMultiple(pString(\"categories\"), true));\nmatchExact(chemin, \"/\"); // false because atLeastOne is true\nmatchExact(chemin, \"/foo/bar\"); // { categories: ['foo', 'bar'] }\n```\n","url":"./chemin/~/pMultiple.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"pNumber","file":"chemin","doc":"Parse a number params using `parseFloat(x)`\n\n```ts\nconst chemin = chemin(pNumber(\"myNum\"));\nmatchExact(chemin, \"/3.1415\"); // { myNum: 3.1415 }\n```\n\n**NOTE**: Because it uses `parseFloat` this will also accept `Infinity`, `10e2`...","url":"./chemin/~/pNumber.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"pOptional","file":"chemin","doc":"Wrap a param to make it optional\n\n```ts\nconst chemin = chemin(pOptional(pInteger(\"myInt\")));\nmatchExact(chemin, \"/42\"); // { myInt: { present: true, value: 42 } }\nmatchExact(chemin, \"/\"); // { myInt: { present: false } }\n```\n","url":"./chemin/~/pOptional.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"pOptionalConst","file":"chemin","doc":"Optional version of `pConstant`\nThis can also be done with `pOptional(pConstant(\"home\"))` but this has a nicer match result (`true` instead of `{ present: true, value: null }`)\n\n```ts\nconst chemin = chemin(pOptionalConst(\"isEditing\", \"edit\"));\nmatchExact(chemin, \"/edit\"); // { isEditing: true }\nmatchExact(chemin, \"/\"); // { isEditing: false }\n```\n\nIf `constant` is omitted then the name is used as the path.\n","url":"./chemin/~/pOptionalConst.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"pOptionalString","file":"chemin","doc":"Optional version of `pString`\nThis can also be done with `pOptional(pString(\"name\"))` but this has a nicer match result (`\"name\"` or `false` instead of `{ present: boolean, value: \"name\" }`)\n\n```ts\nconst chemin = chemin(pOptionalString(\"name\"));\nmatchExact(chemin, \"/paul\"); // { name: 'paul' }\nmatchExact(chemin, \"/\"); // { name: false }\n```\n","url":"./chemin/~/pOptionalString.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"pString","file":"chemin","doc":"","url":"./chemin/~/pString.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"partialMatch","file":"chemin","doc":"","url":"./chemin/~/partialMatch.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"prefix","file":"chemin","doc":"","url":"./chemin/~/prefix.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"serialize","file":"chemin","doc":"Print a chemin from its params.","url":"./chemin/~/serialize.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"splitPathname","file":"chemin","doc":"Split a pathname and prevent empty parts\nAccepts a string and returns an array of strings.\n\n```ts\nsplitPathname(\"/admin/user/5\"); // ['admin', 'user', '5']\n```\n\nNot that all match* functions will do this automatically.\nYou only need this function if you want to avoid splitting multiple times.\n","url":"./chemin/~/splitPathname.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"stringify","file":"chemin","doc":"Transform a chemin into a string representation.","url":"./chemin/~/stringify.html","deprecated":false},{"kind":[{"char":"c","kind":"Class","title":"Class"}],"name":"ExitWithoutResponse","file":"error","doc":"Error thrown when the route exits without responding","url":"./error/~/ExitWithoutResponse.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"ExitWithoutResponse.prototype.name","file":"error","doc":"Error name","url":"./error/~/ExitWithoutResponse.prototype.name.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"ExitWithoutResponse.prototype.message","file":"error","doc":"Error message","url":"./error/~/ExitWithoutResponse.prototype.message.html","deprecated":false},{"kind":[{"char":"c","kind":"Class","title":"Class"}],"name":"MiddlewareCalledUpTooManyTimes","file":"error","doc":"Error thrown when middleware calls up() more than once","url":"./error/~/MiddlewareCalledUpTooManyTimes.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"MiddlewareCalledUpTooManyTimes.prototype.name","file":"error","doc":"Error name","url":"./error/~/MiddlewareCalledUpTooManyTimes.prototype.name.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"MiddlewareCalledUpTooManyTimes.prototype.message","file":"error","doc":"Error message","url":"./error/~/MiddlewareCalledUpTooManyTimes.prototype.message.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"Handler","file":"types","doc":"Handler for routes\n","url":"./types/~/Handler.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"MiddlewareHandler","file":"types","doc":"Handler for middleware\n","url":"./types/~/MiddlewareHandler.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"errorResponse","file":"util","doc":"Returns an error response given a status code and message","url":"./util/~/errorResponse.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"fixLocation","file":"util","doc":"Returns a url string provided the request and a path","url":"./util/~/fixLocation.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"jsonResponse","file":"util","doc":"Returns a JSON `Response` given a stringifiable object","url":"./util/~/jsonResponse.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"redirectResponse","file":"util","doc":"Returns a redirect response given a location","url":"./util/~/redirectResponse.html","deprecated":false}]};
})()